Beet Seed  — відпрацюй навички на базовому рівні.

1. Склади порівняльну таблицю функціонального, нефункціонального і пов’язаного зі змінами видів тестування. 

Назва тестування	Що перевіряється	Коли застосовується	Обмеження	Особливості

Functional	Функції компонента або системи, їхньої функціональності, повноти, конкретності та придатності.
Відповідність функцій до вимог.	Може виконуватись на всіх рівнях тестування.	Розглядають зовнішню поведінку системи.
Не оцінюють якість, продуктивність, дизайн	Мають 2 аспекти розгляду вимоги та бізнес-процеси.

Non-functional	Якісні характеристики компонента або системи. Аспекти які часто не пов'язані з конкретною функцією або дією користувача.	Після функціонального тестування.	Може бути складним для автоматизації.	Оцінює як працює система (швидкість, навантаження, безпека, зручність)
Містить 18 видів тестів.
Тестування, пов’язане зі змінами:
Ретестинг або
Confirmation	Перевірка конкретного бага, який був раніше зафіксований та виправлений розробники.	Після виправлення багу.	Просте тестування. Перевіряє лише виправлений дефект.
Вузьке зосередження на одній або кількох функціях.	Може “зламатись” якась частина в результаті фіксингу багу. В цьому випадку слід доповнити smoke + regression testing.

Smоke testing	Чи працюють основні/базові, критичні функції та чи можна продовжувати тестування.	На початку тестування нової версії продукту.  (релізу або збірки)
Перед регресивним тестуванням.	Не виявляє побічних ефектів від змін.
Не покриває всіх функцій.	Поверхнева перевірка базового функціоналу.
Часто автоматизується.

Sanity testing	Перевірка, що конкретна функція працює після змін.	Коли знаємо, що якась частина коду була зачеплена в результаті виправлення іншого багу.	Не охоплює всю систему.	Виконується вручну. 

Regression	Перевіряє, що зміни внесені в код не зламали інший функціонал.	Після виправлення дефектів, внесення змін.Після  Smoke testing.Перед релізом. 	Може займати багато часу.	Часто автоматизується.
Існує повна та часткова регресія.
Проводиться тільки після Smoke testing.




2. Поясни, в чому різниця між регресією та ретестингом (5 речень).

     Ретестинг — це перевірка конкретного дефекту після його виправлення розробниками а Регресивне тестування  — це ширша перевірка, яка спрямована на виявлення небажаних змін у вже протестованих частинах системи. 
     Основна мета ретестингу — підтвердити, що помилка більше не виникає, і функціонал працює так, як очікується, тоді як мета регресії  упевнитися, що не відбулося порушень у функціоналі після внесення змін (виправлення багів, додавання нових функцій тощо).
   Також відмінність  регресії  від ретестингу полягає в тому, що перед тим як проводити регресію, часто виконується smoke testing, щоб переконатися, що основні функції працюють і система в стабільному стані для глибшого тестування.
*Хвилинка спогадів з досвіду, або регресія в ділі:
Я готувала світлі коржі для торту, який мав бути оздобленим білим кремом ззовні.  Після випікання, я відмітила баг - коржі були сухими. Тато, як основний девелопер сім’ї, запропонував це пофіксити просочивши алкоголем. Я звісно погодилась, в голові маючи уявлення, що він буде поливати коржі коньяком або ромом ( як це було зазвичай у нас). Але коли я отримала пофікшений продукт, була шокована - коржі були вологі, проте він полив їх вишнівкою і вони зафарбувались в червоний колір. Звісно, довелось “писати код заново” і пекти нові коржі. 
І баг репорт заведений не точно був, і вимоги не перевірили  і смішно водночас))


Beet Sprout — детальніше заглибся в практику. 

1. Як ти вважаєш, чи можливе для продукту проведення тільки функціонального тестування, без перевірки нефункціональних вимог?

Я вважаю, що повноцінне тестування продукту неможливе лише в рамках функціонального тестування.

Так, з технічної точки зору, можливо протестувати лише функціональність — перевірити, чи система виконує задані дії згідно з вимогами. Це, скоріш за все може існувати в якомусь невеличкому продукті чи коли терміни запуску продукту дуже стислі. Проте тут постає питання якості..

Функціонального тестування недостатньо, якщо ми говоримо про реальний повноцінний випуск продукту на ринок, адже кінцевий користувач не лише очікує, що система працює, — він очікує, що вона працює ефективно, зручно і безпечно.

Особливо в Agile: ми регулярно враховуємо зворотний зв’язок користувачів, тож нефункціональні характеристики часто стають критичними для успіху.

* На своєму досвіді згадала кейс, коли купувала перші пуанти: розмір був мій, вони мали стрічки, щоб зав’язати навколо стопи, але фактичне використання було неможливим для мене - я не могла тримати рівновагу (хоча так званий “п’ятачок” на якому я мала стояти був рівним, а  устілка гнулась дуже погано, хоч на ній була поділка посередині яка, по ідеї при навантаженні мала згинатись). Тобто функціональні вимоги були дотримані, а от нефункціональні - ні.


2. Як ти розумієш необхідність проведення smoke (димового) тестування? Чи завжди воно є доречним?

Я вважаю, що smoke testing є необхідним, особливо після отримання нової збірки. Його мета — швидко перевірити, чи працюють основні функції програми, і чи можна переходити до подальшого, більш глибокого тестування.

Smoke testing допомагає впевнитися, що ключові частини продукту не зламані після зміни коду або виправлення дефектів. Він виконує роль "фундаменту": якщо базові речі працюють, можна будувати далі — запускати регресію, перевіряти нефункціональні вимоги.

Отже, smoke testing — це коротка, але критично важлива перевірка, яка дозволяє не витрачати час на глибше тестування, якщо вже на старті є критичні баги.

Це тестування не завжди є обов’язковим, особливо якщо тестується дрібна зміна, або компонент який не впливає на логіку, проте воно є дуже ефективним.







Mighty Beet — різнобічно опануй тематику уроку.

1. Ти – засновник/ця стартапу і плануєш випустити на ринок мобільний застосунок для обміну світлинами котиків для iOS та Android пристроїв.

Користувачі можуть завантажувати фотографії котиків. Але не можуть завантажувати фотографії інших тварин/людей/об’єктів. Користувачі можуть додавати друзів, ставити “вподобайки”, залишати коментарі.

Завдання: Напиши 5 функціональних тест-кейсів, які перевіряли б роботу застосунку.


Тест кейс №1
Test Case ID	TC_gallery_01	Test Case Description	Додавання фото з зображенням кота в галерею користувача.
			
Created By	Hanna	Reviewed By	QA Lead	Version	1.0
							
QA Tester’s Log						
Tester's Name	Hanna	Date Tested	05/06/2025	Test Case (Pass/Fail/Not Executed)	Pass
S #	Prerequisites:		S #	Test Data
1	User is logged in		1	The device's gallery contains images of a cat.
2	The user's gallery is open.			
Test Scenario	Зареєстрований користувач з правами юзера та має доступ до функції завантаження фото.				Test environment	Android 15, Xiaomi 13lite

	
Step #	Step Details	Expected Results	Pass / Fail / Not executed / Suspended		
					
1	Натиснути на кнопку додавання фото  або відповідну іконку.	Відображаються опції: "Завантажити з галереї" і "Зробити фото"	Pass		
2	Натиснути на опцію завантаження з пристрою	Галерея пристрою відкрита.	Pass		
3	Вибрати фото з галереї пристрою та натиснути на кнопку збереження	З'явилось повідомлення про успішне додавання	Pass		
4	Натиснути на опцію зробити фото	Відкрита програма Камера	Pass		
5	Зробити фото та натиснути на кнопку або іконку додавання	З'явилось повідомлення про успішне додавання	Pass		
6	Відкрити галерею користувача 	Додані фото успішно відображаються в списку фотографій у галереї.			
Тест кейс №2
Test Case ID	TC_gallery_02	Test Case Description	Завантаження недопустимого фото.
			
Created By	Hanna	Reviewed By	QA Lead	Version	1.0
							
QA Tester’s Log						
							
Tester's Name	Hanna	Date Tested	05/06/2025	Test Case (Pass/Fail/Not Executed)	Pass
S #	Prerequisites:		S #	Test Data
1	User is logged in		1	The device's gallery contains images of a person, a pig, and a bicycle.
2	The user's gallery is open.			
Test Scenario	Зареєстрований користувач з правами юзера та має доступ до функції завантаження фото.				Test environment	Android 15, Xiaomi 13lite

	
Step #	Step Details	Expected Results	Pass / Fail / Not executed / Suspended		
					
1	Натиснути на кнопку додавання фото  або відповідну іконку.	Відображаються опції: "Завантажити з галереї" і "Зробити фото"	Pass		
2	Натиснути на опцію завантаження з пристрою	Галерея пристрою відкрита.	Pass		
3	Вибрати зображення, яке містить зображення людини   та підтвердити вибір	На екрані висвічується повідомлення "На зображенні присутні недопустимі об'єкти: люди / інші тварини / предмети"	



Pass		
4	Вибрати зображення, яке містить зображення свині  та підтвердити вибір				
5	Вибрати зображення, яке містить зображення велосипеда  та підтвердити вибір				

Тест кейс №3
Test Case ID	TC_FriendRequest_01	Test Case Description	Надсилання запиту на дружбу.
			
Created By	Hanna	Reviewed By	QA Lead	Version	1.0
							
QA Tester’s Log						
							
Tester's Name	Hanna	Date Tested	05/06/2025	Test Case (Pass/Fail/Not Executed)	Pass
S #	Prerequisites:		S #	Test Data
1	User is logged in		1	Authorized user: Meow0506Cat
			2	User being added: Leopold25
Test Scenario	Зареєстрований користувач з правами юзера та має доступ до функції надсилання запитів на дружбу.				Test environment	Android 15, Xiaomi 13lite

	
Step #	Step Details	Expected Results	Pass / Fail / Not executed / Suspended		
					
1	Відкрити розділ пропонованих друзів.	Відкрита сторінка з профілями інших користувачів.	Pass		
2	Натиснути на кнопку додавання в друзі для обраного профілю 	Запит на дружбу успішно надіслано, і з'являється повідомлення про успішне надсилання запиту.	Pass		






Тест кейс №4
Test Case ID	TC_FriendRequest_02	Test Case Description	Підтвердження або скасування запиту дружби.
			
Created By	Hanna	Reviewed By	QA Lead	Version	1.0
							
QA Tester’s Log						
							
Tester's Name	Hanna	Date Tested	05/06/2025	Test Case (Pass/Fail/Not Executed)	Pass
S #	Prerequisites:		S #	Test Data
1	User is logged in		1	Authorized user: Meow0506Cat

2	The user must have an incoming friend request.		2	Incoming friend request: user Kitty123
Test Scenario	Зареєстрований користувач з правами юзера та має мати вхідний запит на дружбу.				Test environment	Android 15, Xiaomi 13lite

	
Step #	Step Details	Expected Results	Pass / Fail / Not executed / Suspended		
					
1	Натиснути на іконку сповіщень.	Відкрито поле сповіщень та нотифікацій.	Pass		
2	Обрати запит на дружбу зі списку вхідних запитів.	Відкрито обраний запит дружби.	Pass		
3	Натиснути кнопку дозволу для підтвердження дружби або “Відхилити” для скасування запиту.	Запит на дружбу успішно підтверджено, користувач доданий до списку друзів.	Pass		
4	Натиснути кнопку відхилення для скасування запиту.	Запит на дружбу успішно скасовано, користувач більше не бачить цього запиту.	Pass		

Тест кейс №5
Test Case ID	TC_Like_001	Test Case Description	Поставити або прибрати лайк.
			
Created By	Hanna	Reviewed By	QA Lead	Version	1.0
							
QA Tester’s Log						
							
Tester's Name	Hanna	Date Tested	05/06/2025	Test Case (Pass/Fail/Not Executed)	Pass
S #	Prerequisites:		S #	Test Data
1	User is logged in		1	Authorized user: Meow0506Cat

2	The user must be on another user's profile with a photo that can be liked.		2	User profile =  Garfild93 
3	There is a photo that you can like.		3	Photo for like  = profile photo #1
Test Scenario	Зареєстрований користувач з правами юзера.				Test environment	Android 15, Xiaomi 13lite

	
Step #	Step Details	Expected Results	Pass / Fail / Not executed / Suspended		
					
1	Відкрити профіль іншого користувача.	Профіль іншого користувача успішно відкритий.	Pass		
2	Натиснути на фото профілю.	Фото профілю відкрите, показані фунцкції під фото. Іконка лайку не зафарбована кольором.	Pass		
3	Натиснути на іконку серця (лайк) для того щоб поставити лайк.	Успішно поставлено лайк на фото. Інонка лайку світиться червоним кольором.	Pass		
4	Натиснути  повторно на іконку серця  (лайк)  для того щоб прибрати лайк.	Успішно прибрано лайк. Іконка лайку змінила вигляд -  не зафарбована кольором.	Pass		
Тест кейс №6
Test Case ID	TC_Comment_001	Test Case Description	Залишити коментар до фото.
			
Created By	Hanna	Reviewed By	QA Lead	Version	1.0
QA Tester’s Log						
Tester's Name	Hanna	Date Tested	05/06/2025	Test Case (Pass/Fail/Not Executed)	Pass
S #	Prerequisites:		S #	Test Data
1	User is logged in		1	Authorized user: Meow0506Cat

2	The user must be in another user's photo gallery with the photo to which you want to leave a comment.		2	User profile =  Thomas@1
3	There is a photo on which you can leave a comment.		3	Photo for comment  = gallery photo #1
			4	Comment text =  "Stylish kitty!"
Test Scenario	Зареєстрований користувач з правами юзера.				Test environment	Android 15, Xiaomi 13lite

	
Step #	Step Details	Expected Results	Pass / Fail / Not executed / Suspended		
					
1	Натиснути на обране  фото в галереї.	Фото відкрите, показані фунцкції під фото.	Pass		
2	Натиснути на іконку коментаря.	Відкрито поле для введення тексту коментаря.	Pass		
3	Ввести текст коментаря.	Текст успішно введено в поле.	Pass		
4	Натиснути на кнопку/іконку надсилання.	Коментар успішно відправлено.	Pass		
5	Перевірити відображення коментаря під фото.	Коментар успішно опублікований під фото і відображається для усіх користувачів, які переглядають це фото.	Pass		



2. Напиши, які нефункціональні вимоги ти хотів/ла б  застосувати для продукту твого стартапу. 
Опиши перевірки, які б їх перевіряли (3-5 прикладів).


Опис нефункціональної вимоги	Перевірка
Завантаження фото має відбуватись  не довше ніж за 5 секунд за умови завантаження 1-10 фото..	Провести performance testing - симуляцію завантаження фото для перевірки часу відгуку системи.
Система повинна стабільно працювати при навантаженні  500 юзерів/хв.	Провести load testing для оцінки продуктивності системи під час одночасного доступу та виявити можливі затримки.
Користувач повинен мати можливість приховувати власні фото від інших користувачів (окрім дозволених)	Security testing для перевірки, що інші користувачі не мають доступу до приватних або прихованих зображень.
Доступ до камери має запитуватись та фіксуватись коли користувач обирає функцію “Зробити фото”	Security testing - перевірка дозволів додатка, конфіденційності.
Система має відображати коректно текст, дизайн та інтерфейс при зміні  мовної локалізації (українська, англійська, німецька)	Localization testing для перевірки коректного перекладу текстів, відсутності змін в архітектурі, відповідності часового формату.
Система повинна дозволяти залишати коментарі довжиною від 1 до 250 символів, з підтримкою української, англійської, німецької мов і спеціальних символів.	Usability Testing - наскільки зручно користувачу вводити коментарі, чи є індикатор, що показує доступних до введення символів.
А також я знайшла інфу, що є Boundary Testing:
перевірка коментарів на межах допустимого значення символів, наприклад, тестування на максимальній межі (максимальна кількість символів) і одна символа менше (максимальна межева перевірка) та Input Validation Testing - 
Перевірка, чи система блокує введення недопустимих символів або перевищення допустимого обсягу символів у коментарях.
Користувачу має бути зручно ставити або прибирати лайк незалежно від того, тримає він телефон однією рукою, двома руками чи використовує стилус.	Usability Testing - перевірка зручності використання функції лайку в різних умовах.
Користувач має мати можливість додати фото до своєї галереї не більше ніж на 4 кліки.	Usability Testing - перевірка логічності кроків та інтуїтивності використання.


